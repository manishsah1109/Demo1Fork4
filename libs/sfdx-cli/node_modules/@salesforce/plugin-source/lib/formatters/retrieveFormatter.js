/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages, SfError } from '@salesforce/core';
import { get } from '@salesforce/ts-types';
import { ensureArray } from '@salesforce/kit';
import chalk from 'chalk';
import { ResultFormatter } from './resultFormatter.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
export class RetrieveFormatter extends ResultFormatter {
    options;
    warnings;
    result;
    messages = Messages.loadMessages('@salesforce/plugin-source', 'retrieve');
    constructor(ux, options, result) {
        super(ux, options);
        this.options = options;
        // zipFile can become massive and unwieldy with JSON parsing/terminal output and, isn't useful
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        delete result.response.zipFile;
        this.result = result.response;
        // grab warnings
        this.warnings = ensureArray(result?.response?.messages ?? []);
    }
    hasStatus(status) {
        return this.result?.status === status;
    }
    displayWarnings() {
        this.ux.styledHeader(chalk.yellow(this.messages.getMessage('retrievedSourceWarningsHeader')));
        this.ux.table(this.warnings, { fileName: { header: 'FILE NAME' }, problem: { header: 'PROBLEM' } });
        this.ux.log();
    }
    displayErrors() {
        // an invalid packagename retrieval will end up with a message in the `errorMessage` entry
        const errorMessage = get(this.result, 'errorMessage');
        if (errorMessage) {
            throw new SfError(errorMessage);
        }
        const unknownMsg = [{ fileName: 'unknown', problem: 'unknown' }];
        const responseMsgs = get(this.result, 'messages', unknownMsg);
        const errMsgs = ensureArray(responseMsgs);
        const errMsgsForDisplay = errMsgs.reduce((p, c) => `${p}\n${c.fileName}: ${c.problem}`, '');
        this.ux.log(`Retrieve Failed due to: ${errMsgsForDisplay}`);
    }
}
//# sourceMappingURL=retrieveFormatter.js.map