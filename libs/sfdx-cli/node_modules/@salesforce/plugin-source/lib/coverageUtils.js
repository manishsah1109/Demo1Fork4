import chalk from 'chalk';
import { ensureArray } from '@salesforce/kit';
function mapTestResults(testResults) {
    return testResults.map((successOrFailure) => {
        const testResult = successOrFailure;
        return {
            apexClass: { fullName: testResult.name, id: testResult.id, name: testResult.name, namespacePrefix: '' },
            apexLogId: '',
            asyncApexJobId: '',
            fullName: testResult.name,
            id: testResult.id,
            message: testResult.message ?? '',
            methodName: testResult.methodName,
            outcome: !testResult.message ? "Pass" /* ApexTestResultOutcome.Pass */ : "Fail" /* ApexTestResultOutcome.Fail */,
            queueItemId: '',
            runTime: parseInt(testResult.time, 10),
            stackTrace: testResult.stackTrace || '',
            testTimestamp: '',
        };
    });
}
export function prepCoverageForDisplay(codeCoverage) {
    const coverage = codeCoverage.sort((a, b) => (a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1));
    return coverage.map((cov) => ({
        ...cov,
        numLocations: stylePercentage(calculateCoveragePercent(cov)),
        lineNotCovered: cov.locationsNotCovered
            ? ensureArray(cov.locationsNotCovered)
                .map((location) => location.line)
                .join(',')
            : '',
    }));
}
const stylePercentage = (pct) => {
    const color = pct < 75 ? chalk.red : pct >= 90 ? chalk.green : chalk.yellow;
    return color(`${pct}%`);
};
const calculateCoveragePercent = (cov) => {
    const numLocationsNum = parseInt(cov.numLocations, 10);
    const numLocationsNotCovered = parseInt(cov.numLocationsNotCovered, 10);
    const coverageDecimal = parseFloat(((numLocationsNum - numLocationsNotCovered) / numLocationsNum).toFixed(2));
    return numLocationsNum > 0 ? coverageDecimal * 100 : 100;
};
function generateCoveredLines(cov) {
    const numCovered = parseInt(cov.numLocations, 10);
    const numUncovered = parseInt(cov.numLocationsNotCovered, 10);
    const uncoveredLines = ensureArray(cov.locationsNotCovered).map((location) => parseInt(location.line, 10));
    const minLineNumber = uncoveredLines.length ? Math.min(...uncoveredLines) : 1;
    const lines = [...Array(numCovered + numUncovered).keys()].map((i) => i + minLineNumber);
    const coveredLines = lines.filter((line) => !uncoveredLines.includes(line));
    return [uncoveredLines, coveredLines];
}
export function transformCoverageToApexCoverage(mdCoverage) {
    const apexCoverage = mdCoverage.map((cov) => {
        const numCovered = parseInt(cov.numLocations, 10);
        const numUncovered = parseInt(cov.numLocationsNotCovered, 10);
        const [uncoveredLines, coveredLines] = generateCoveredLines(cov);
        const ac = {
            ApexClassOrTrigger: {
                Id: cov.id,
                Name: cov.name,
            },
            NumLinesCovered: numCovered,
            NumLinesUncovered: numUncovered,
            Coverage: {
                coveredLines,
                uncoveredLines,
            },
        };
        return ac;
    });
    return { done: true, totalSize: apexCoverage.length, records: apexCoverage };
}
export function transformDeployTestsResultsToTestResult(connection, runTestResult) {
    const numTestsRun = parseInt(runTestResult.numTestsRun, 10);
    const numTestFailures = parseInt(runTestResult.numFailures, 10);
    return {
        summary: {
            commandTimeInMs: 0,
            failRate: ((numTestFailures / numTestsRun) * 100).toFixed(2) + '%',
            failing: numTestFailures,
            hostname: connection.getConnectionOptions().instanceUrl ?? '',
            orgId: connection.getAuthInfoFields().orgId ?? '',
            outcome: '',
            passRate: numTestFailures === 0 ? '100%' : ((1 - numTestFailures / numTestsRun) * 100).toFixed(2) + '%',
            passing: numTestsRun - numTestFailures,
            skipRate: '',
            skipped: 0,
            testExecutionTimeInMs: parseFloat(runTestResult.totalTime),
            testRunId: '',
            testStartTime: new Date().toISOString(),
            testTotalTimeInMs: parseFloat(runTestResult.totalTime),
            testsRan: numTestsRun,
            userId: connection.getConnectionOptions().userId ?? '',
            username: connection.getUsername() ?? '',
        },
        tests: [
            ...mapTestResults(ensureArray(runTestResult.successes)),
            ...mapTestResults(ensureArray(runTestResult.failures)),
        ],
        codecoverage: ensureArray(runTestResult?.codeCoverage).map((cov) => {
            const codeCoverageResult = {};
            codeCoverageResult.apexId = cov.id;
            codeCoverageResult.name = cov.name;
            codeCoverageResult.numLinesUncovered = parseInt(cov.numLocationsNotCovered, 10);
            codeCoverageResult.numLinesCovered = parseInt(cov.numLocations, 10) - codeCoverageResult.numLinesUncovered;
            const [uncoveredLines, coveredLines] = generateCoveredLines(cov);
            codeCoverageResult.coveredLines = coveredLines;
            codeCoverageResult.uncoveredLines = uncoveredLines;
            const numLocationsNum = parseInt(cov.numLocations, 10);
            const numLocationsNotCovered = parseInt(cov.numLocationsNotCovered, 10);
            codeCoverageResult.percentage =
                numLocationsNum > 0
                    ? (((numLocationsNum - numLocationsNotCovered) / numLocationsNum) * 100).toFixed() + '%'
                    : '';
            return codeCoverageResult;
        }),
    };
}
//# sourceMappingURL=coverageUtils.js.map