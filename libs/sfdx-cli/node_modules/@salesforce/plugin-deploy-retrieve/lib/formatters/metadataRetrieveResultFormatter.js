/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { join, parse } from 'node:path';
import { Ux } from '@salesforce/sf-plugins-core';
import { Messages } from '@salesforce/core';
import { fileResponseSortFn, makePathRelative } from '../utils/output.js';
const ux = new Ux();
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
export const retrieveMessages = Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'retrieve.start');
export class MetadataRetrieveResultFormatter {
    result;
    opts;
    zipFilePath;
    files;
    constructor(result, opts) {
        this.result = result;
        this.opts = opts;
        this.zipFilePath = join(opts['target-metadata-dir'], opts['zip-file-name']);
        this.files = (this.result.getFileResponses() ?? []).map(makePathRelative).sort(fileResponseSortFn);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getJson() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { zipFile, ...responseWithoutZipFile } = this.result.response;
        return { ...responseWithoutZipFile, zipFilePath: this.zipFilePath, files: this.files };
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async display() {
        ux.log(retrieveMessages.getMessage('info.WroteZipFile', [this.zipFilePath]));
        if (this.opts.unzip) {
            const extractPath = join(this.opts['target-metadata-dir'], parse(this.opts['zip-file-name']).name);
            ux.log(retrieveMessages.getMessage('info.ExtractedZipFile', [this.zipFilePath, extractPath]));
        }
    }
}
//# sourceMappingURL=metadataRetrieveResultFormatter.js.map