/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { ComponentStatus, } from '@salesforce/source-deploy-retrieve';
import { isObject } from '@salesforce/ts-types';
import { DefaultReportOptions } from '@salesforce/apex-node';
export const reportsFormatters = Object.keys(DefaultReportOptions);
export var TestLevel;
(function (TestLevel) {
    TestLevel["NoTestRun"] = "NoTestRun";
    TestLevel["RunSpecifiedTests"] = "RunSpecifiedTests";
    TestLevel["RunLocalTests"] = "RunLocalTests";
    TestLevel["RunAllTestsInOrg"] = "RunAllTestsInOrg";
})(TestLevel || (TestLevel = {}));
export var API;
(function (API) {
    API["SOAP"] = "SOAP";
    API["REST"] = "REST";
})(API || (API = {}));
/** validates source component with fullname, type, and xml props */
export const isSourceComponent = (sc) => isObject(sc) &&
    'type' in sc &&
    typeof sc.type === 'object' &&
    sc.type !== null &&
    'name' in sc.type &&
    typeof sc.type.name === 'string' &&
    'fullName' in sc &&
    'walkContent' in sc &&
    // (typeof sc.fullName === 'string' || typeof sc.fullName === 'function');
    typeof sc.fullName === 'string';
export const isSourceComponentWithXml = (sc) => isSourceComponent(sc) && 'xml' in sc && typeof sc.xml === 'string';
export const isSdrFailure = (fileResponse) => fileResponse.state === ComponentStatus.Failed;
export const isSdrSuccess = (fileResponse) => fileResponse.state !== ComponentStatus.Failed;
export const isFileResponseDeleted = (fileResponse) => fileResponse.state === ComponentStatus.Deleted;
export const isDefined = (value) => value !== undefined;
//# sourceMappingURL=types.js.map