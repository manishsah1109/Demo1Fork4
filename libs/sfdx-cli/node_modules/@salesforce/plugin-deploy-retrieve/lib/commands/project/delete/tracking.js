/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages } from '@salesforce/core';
import { SourceTracking } from '@salesforce/source-tracking';
import { Flags, loglevel, orgApiVersionFlagWithDeprecations, requiredOrgFlagWithDeprecations, SfCommand, StandardColors, } from '@salesforce/sf-plugins-core';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'delete.tracking');
export class DeleteTracking extends SfCommand {
    static deprecateAliases = true;
    static aliases = ['force:source:tracking:clear'];
    static summary = messages.getMessage('deleteSummary');
    static description = messages.getMessage('deleteDescription');
    static requiresProject = true;
    static examples = messages.getMessages('deleteExample');
    static flags = {
        'api-version': orgApiVersionFlagWithDeprecations,
        loglevel,
        'target-org': requiredOrgFlagWithDeprecations,
        'no-prompt': Flags.boolean({
            char: 'p',
            summary: messages.getMessage('flags.no-prompt.summary'),
            aliases: ['noprompt'],
            deprecateAliases: true,
        }),
    };
    async run() {
        const { flags } = await this.parse(DeleteTracking);
        let clearedFiles = [];
        if (flags['no-prompt'] ||
            (await this.confirm({ message: StandardColors.info(messages.getMessage('promptMessage')) }))) {
            const sourceTracking = await SourceTracking.create({
                project: this.project,
                org: flags['target-org'],
            });
            clearedFiles = await Promise.all([sourceTracking.clearLocalTracking(), sourceTracking.clearRemoteTracking()]);
            this.logSuccess('Cleared local tracking files.');
        }
        return { clearedFiles };
    }
}
//# sourceMappingURL=tracking.js.map