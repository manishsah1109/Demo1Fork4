/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import path from 'node:path';
import input from '@inquirer/input';
import confirm from '@inquirer/confirm';
import select from '@inquirer/select';
import { Messages } from '@salesforce/core';
import { getObjectXmlByFolderAsJson } from '../fs.js';
import { objectPrompt } from './object.js';
import { makeNameApiCompatible } from './functions.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-sobject', 'prompts.relationship');
export const relationshipFieldPrompts = async ({ type, packageDirs, childObjectFolderPath, }) => {
    const childObjectXml = await getObjectXmlByFolderAsJson(childObjectFolderPath);
    const relationshipLabel = await input({
        message: 'Relationship label',
        ...(childObjectXml.pluralLabel ? { default: childObjectXml.pluralLabel } : {}),
    });
    const relationshipName = await input({
        message: 'Relationship name',
        default: makeNameApiCompatible(relationshipLabel),
    });
    return {
        referenceTo: (await objectPrompt(packageDirs, messages.getMessage('objectPrompt'))).split(path.sep).pop(),
        relationshipLabel,
        relationshipName,
        ...(type === 'Lookup' ? { deleteConstraint: await deleteConstraintPrompt() } : {}),
        ...(type === 'MasterDetail' ? await masterDetailPrompts() : {}),
    };
};
const masterDetailPrompts = async () => ({
    reparentableMasterDetail: await confirm({
        message: messages.getMessage('reparentableMasterDetail'),
        default: false,
    }),
    writeRequiresMasterRead: await confirm({
        message: messages.getMessage('writeRequiresMasterRead'),
        default: false,
    }),
});
const deleteConstraintPrompt = async () => select({
    message: messages.getMessage('lookupDeleteConstraint'),
    default: 'SetNull',
    choices: [
        {
            value: 'SetNull',
            name: messages.getMessage('lookupDeleteConstraint.setNull'),
        },
        {
            value: 'Restrict',
            name: messages.getMessage('lookupDeleteConstraint.restrict'),
        },
        {
            value: 'Cascade',
            name: messages.getMessage('lookupDeleteConstraint.cascade'),
        },
    ],
});
//# sourceMappingURL=relationshipField.js.map