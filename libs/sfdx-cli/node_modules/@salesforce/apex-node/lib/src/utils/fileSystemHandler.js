"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureDirectoryExists = ensureDirectoryExists;
exports.ensureFileExists = ensureFileExists;
exports.createFile = createFile;
exports.createFiles = createFiles;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
function ensureDirectoryExists(filePath) {
    if (fs.existsSync(filePath)) {
        return;
    }
    ensureDirectoryExists(path.dirname(filePath));
    fs.mkdirSync(filePath);
}
function ensureFileExists(filePath) {
    ensureDirectoryExists(path.dirname(filePath));
    fs.closeSync(fs.openSync(filePath, 'w'));
}
/**
 * Method to save a file on disk.
 *
 * @param filePath path where to
 * @param fileContent file contents
 */
function createFile(filePath, fileContent) {
    ensureFileExists(filePath);
    const writeStream = fs.createWriteStream(filePath);
    writeStream.write(fileContent);
}
function streamPromise(stream) {
    return new Promise((resolve, reject) => {
        stream.on('end', () => {
            resolve();
        });
        stream.on('error', (error) => {
            reject(error);
        });
    });
}
/**
 * Method to save multiple files on disk
 * @param fileMap key = filePath, value = file contents
 */
async function createFiles(fileMap) {
    const writePromises = fileMap.map((file) => {
        ensureFileExists(file.path);
        const writeStream = fs.createWriteStream(file.path);
        writeStream.write(file.content);
        return streamPromise(writeStream);
    });
    await Promise.all(writePromises);
}
//# sourceMappingURL=fileSystemHandler.js.map