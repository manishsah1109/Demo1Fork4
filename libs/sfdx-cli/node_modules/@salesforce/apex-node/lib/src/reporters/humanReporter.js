"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HumanReporter = void 0;
const utils_1 = require("../utils");
const i18n_1 = require("../i18n");
const core_1 = require("@salesforce/core");
const os = __importStar(require("node:os"));
class HumanReporter {
    format(testResult, detailedCoverage, concise = false) {
        utils_1.HeapMonitor.getInstance().checkHeapSize('HumanReporter.format');
        try {
            let tbResult = '';
            if (!testResult.codecoverage || !detailedCoverage) {
                tbResult += this.formatTestResults(testResult.tests, concise);
            }
            if (testResult.codecoverage) {
                if (detailedCoverage) {
                    tbResult += this.formatDetailedCov(testResult, concise);
                }
                if (!concise) {
                    tbResult += this.formatCodeCov(testResult.codecoverage);
                }
            }
            if (testResult.setup && !concise) {
                tbResult += this.formatSetup(testResult);
            }
            tbResult += this.formatSummary(testResult);
            return tbResult;
        }
        finally {
            utils_1.HeapMonitor.getInstance().checkHeapSize('HumanReporter.format');
        }
    }
    formatSummary(testResult) {
        const tb = new utils_1.Table();
        // Summary Table
        const summaryRowArray = [
            {
                name: i18n_1.nls.localize('outcome'),
                value: testResult.summary.outcome
            },
            {
                name: i18n_1.nls.localize('testsRan'),
                value: String(testResult.summary.testsRan)
            },
            {
                name: i18n_1.nls.localize('passRate'),
                value: testResult.summary.passRate
            },
            {
                name: i18n_1.nls.localize('failRate'),
                value: testResult.summary.failRate
            },
            {
                name: i18n_1.nls.localize('skipRate'),
                value: testResult.summary.skipRate
            },
            {
                name: i18n_1.nls.localize('testRunId'),
                value: testResult.summary.testRunId
            },
            {
                name: i18n_1.nls.localize('testSetupTime'),
                value: `${testResult.summary.testSetupTimeInMs || 0} ms`
            },
            {
                name: i18n_1.nls.localize('testExecutionTime'),
                value: `${testResult.summary.testExecutionTimeInMs} ms`
            },
            {
                name: i18n_1.nls.localize('testTotalTime'),
                value: `${testResult.summary.testTotalTimeInMs} ms`
            },
            {
                name: i18n_1.nls.localize('orgId'),
                value: testResult.summary.orgId
            },
            {
                name: i18n_1.nls.localize('username'),
                value: testResult.summary.username
            },
            ...(testResult.summary.orgWideCoverage
                ? [
                    {
                        name: i18n_1.nls.localize('orgWideCoverage'),
                        value: String(testResult.summary.orgWideCoverage)
                    }
                ]
                : [])
        ];
        let summaryTable = os.EOL.repeat(2);
        return (summaryTable += tb.createTable(summaryRowArray, [
            {
                key: 'name',
                label: i18n_1.nls.localize('nameColHeader')
            },
            { key: 'value', label: i18n_1.nls.localize('valueColHeader') }
        ], i18n_1.nls.localize('testSummaryHeader')));
    }
    formatTestResults(tests, concise) {
        const tb = new utils_1.Table();
        const testRowArray = [];
        tests.forEach((elem) => {
            if (!concise ||
                elem.outcome === "Fail" /* ApexTestResultOutcome.Fail */ ||
                elem.outcome === "CompileFail" /* ApexTestResultOutcome.CompileFail */) {
                const msg = elem.stackTrace
                    ? `${elem.message}\n${elem.stackTrace}`
                    : elem.message;
                testRowArray.push({
                    name: elem.fullName,
                    outcome: elem.outcome,
                    msg: elem.message ? msg : '',
                    runtime: elem.outcome !== "Fail" /* ApexTestResultOutcome.Fail */
                        ? `${elem.runTime}`
                        : ''
                });
            }
        });
        let testResultTable = '';
        if (testRowArray.length > 0) {
            testResultTable = os.EOL.repeat(2);
            testResultTable += tb.createTable(testRowArray, [
                {
                    key: 'name',
                    label: i18n_1.nls.localize('testNameColHeader')
                },
                { key: 'outcome', label: i18n_1.nls.localize('outcomeColHeader') },
                { key: 'msg', label: i18n_1.nls.localize('msgColHeader') },
                { key: 'runtime', label: i18n_1.nls.localize('runtimeColHeader') }
            ], i18n_1.nls.localize('testResultsHeader'));
        }
        return testResultTable;
    }
    formatSetup(testResult) {
        const tb = new utils_1.Table();
        const testRowArray = [];
        testResult.setup.forEach((elem) => {
            testRowArray.push({
                name: elem.fullName,
                time: `${elem.testSetupTime}`,
                runId: testResult.summary.testRunId
            });
        });
        let testResultTable = '';
        if (testRowArray.length > 0) {
            testResultTable = os.EOL.repeat(2);
            testResultTable += tb.createTable(testRowArray, [
                {
                    key: 'name',
                    label: i18n_1.nls.localize('testSetupMethodNameColHeader')
                },
                { key: 'time', label: i18n_1.nls.localize('setupTimeColHeader') }
            ], i18n_1.nls
                .localize('testSetupResultsHeader')
                .replace('runId', testRowArray[0].runId));
        }
        return testResultTable;
    }
    formatDetailedCov(testResult, concise) {
        const tb = new utils_1.Table();
        const testRowArray = [];
        testResult.tests.forEach((elem) => {
            if (!concise ||
                elem.outcome === "Fail" /* ApexTestResultOutcome.Fail */ ||
                elem.outcome === "CompileFail" /* ApexTestResultOutcome.CompileFail */) {
                const msg = elem.stackTrace
                    ? `${elem.message}\n${elem.stackTrace}`
                    : elem.message;
                if (elem.perClassCoverage) {
                    elem.perClassCoverage.forEach((perClassCov) => {
                        testRowArray.push({
                            name: elem.fullName,
                            coveredClassName: perClassCov.apexClassOrTriggerName,
                            outcome: elem.outcome,
                            coveredClassPercentage: perClassCov.percentage,
                            msg: elem.message ? msg : '',
                            runtime: `${elem.runTime}`
                        });
                    });
                }
                else {
                    testRowArray.push({
                        name: elem.fullName,
                        coveredClassName: '',
                        outcome: elem.outcome,
                        coveredClassPercentage: '',
                        msg: elem.message ? msg : '',
                        runtime: `${elem.runTime}`
                    });
                }
            }
        });
        let detailedCovTable = '';
        if (testRowArray.length > 0) {
            detailedCovTable = os.EOL.repeat(2);
            detailedCovTable += tb.createTable(testRowArray, [
                {
                    key: 'name',
                    label: i18n_1.nls.localize('testNameColHeader')
                },
                {
                    key: 'coveredClassName',
                    label: i18n_1.nls.localize('classTestedHeader')
                },
                {
                    key: 'outcome',
                    label: i18n_1.nls.localize('outcomeColHeader')
                },
                {
                    key: 'coveredClassPercentage',
                    label: i18n_1.nls.localize('percentColHeader')
                },
                { key: 'msg', label: i18n_1.nls.localize('msgColHeader') },
                { key: 'runtime', label: i18n_1.nls.localize('runtimeColHeader') }
            ], i18n_1.nls.localize('detailedCodeCovHeader', [testResult.summary.testRunId]));
        }
        return detailedCovTable;
    }
    formatCodeCov(codeCoverages) {
        const tb = new utils_1.Table();
        const codeCovRowArray = [];
        codeCoverages.forEach((elem) => {
            codeCovRowArray.push({
                name: elem.name,
                percent: elem.percentage,
                uncoveredLines: this.formatUncoveredLines(elem.uncoveredLines)
            });
        });
        let codeCovTable = os.EOL.repeat(2);
        codeCovTable += tb.createTable(codeCovRowArray, [
            {
                key: 'name',
                label: i18n_1.nls.localize('classesColHeader')
            },
            {
                key: 'percent',
                label: i18n_1.nls.localize('percentColHeader')
            },
            {
                key: 'uncoveredLines',
                label: i18n_1.nls.localize('uncoveredLinesColHeader')
            }
        ], i18n_1.nls.localize('codeCovHeader'));
        return codeCovTable;
    }
    formatUncoveredLines(uncoveredLines) {
        const arrayLimit = 5;
        if (uncoveredLines.length === 0) {
            return '';
        }
        const limit = uncoveredLines.length > arrayLimit ? arrayLimit : uncoveredLines.length;
        let processedLines = uncoveredLines.slice(0, limit).join(',');
        if (uncoveredLines.length > arrayLimit) {
            processedLines += '...';
        }
        return processedLines;
    }
}
exports.HumanReporter = HumanReporter;
__decorate([
    (0, utils_1.elapsedTime)()
], HumanReporter.prototype, "format", null);
__decorate([
    (0, utils_1.elapsedTime)()
], HumanReporter.prototype, "formatSummary", null);
__decorate([
    (0, utils_1.elapsedTime)()
], HumanReporter.prototype, "formatTestResults", null);
__decorate([
    (0, utils_1.elapsedTime)()
], HumanReporter.prototype, "formatSetup", null);
__decorate([
    (0, utils_1.elapsedTime)()
], HumanReporter.prototype, "formatDetailedCov", null);
__decorate([
    (0, utils_1.elapsedTime)()
], HumanReporter.prototype, "formatCodeCov", null);
__decorate([
    (0, utils_1.elapsedTime)('elapsedTime', core_1.LoggerLevel.TRACE)
], HumanReporter.prototype, "formatUncoveredLines", null);
//# sourceMappingURL=humanReporter.js.map