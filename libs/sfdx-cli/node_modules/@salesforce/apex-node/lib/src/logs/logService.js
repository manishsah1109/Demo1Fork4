"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogService = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const constants_1 = require("./constants");
const path = __importStar(require("path"));
const i18n_1 = require("../i18n");
const utils_1 = require("../utils");
const traceFlags_1 = require("../utils/traceFlags");
const elapsedTime_1 = require("../utils/elapsedTime");
class LogService {
    connection;
    logger;
    logTailer;
    constructor(connection) {
        this.connection = connection;
    }
    async getLogIds(options) {
        if (!(typeof options.logId === 'string' ||
            typeof options.numberOfLogs === 'number')) {
            throw new Error(i18n_1.nls.localize('missingInfoLogError'));
        }
        if (typeof options.numberOfLogs === 'number') {
            const logIdRecordList = await this.getLogRecords(options.numberOfLogs);
            return logIdRecordList.map((logRecord) => logRecord.Id);
        }
        return [options.logId];
    }
    // TODO: readableStream cannot be used until updates are made in jsforce and sfdx-core
    async getLogs(options) {
        const logIdList = await this.getLogIds(options);
        const logPaths = [];
        const connectionRequests = logIdList.map(async (id) => {
            const url = `${this.connection.tooling._baseUrl()}/sobjects/ApexLog/${id}/Body`;
            const logRecord = await this.toolingRequest(url);
            if (options.outputDir) {
                const logPath = path.join(options.outputDir, `${id}.log`);
                logPaths.push(logPath);
                (0, utils_1.createFile)(logPath, logRecord);
            }
            return String(logRecord);
        });
        const logs = await Promise.all(connectionRequests);
        if (logPaths.length > 0) {
            const logMap = [];
            for (let i = 0; i < logs.length; i++) {
                logMap.push({ log: logs[i], logPath: logPaths[i] });
            }
            return logMap;
        }
        return logs.map((log) => {
            return { log };
        });
    }
    async getLogById(logId) {
        const baseUrl = this.connection.tooling._baseUrl();
        const url = `${baseUrl}/sobjects/ApexLog/${logId}/Body`;
        const response = await this.connection.tooling.request(url);
        return { log: response.toString() || '' };
    }
    async getLogRecords(numberOfLogs) {
        let apexLogQuery = `
        SELECT Id, Application, DurationMilliseconds, Location, LogLength, LogUser.Name,
          Operation, Request, StartTime, Status
        FROM ApexLog
        ORDER BY StartTime DESC
      `;
        if (typeof numberOfLogs === 'number') {
            if (numberOfLogs <= 0) {
                throw new Error(i18n_1.nls.localize('numLogsError'));
            }
            numberOfLogs = Math.min(numberOfLogs, constants_1.MAX_NUM_LOGS);
            apexLogQuery += ` LIMIT ${numberOfLogs}`;
        }
        return (await this.connection.tooling.query(apexLogQuery))
            .records;
    }
    async tail(org, tailer) {
        this.logger = await core_1.Logger.child('apexLogApi', { tag: 'tail' });
        this.logTailer = tailer;
        const stream = await this.createStreamingClient(org);
        this.logger.debug(i18n_1.nls.localize('startHandshake'));
        await stream.handshake();
        this.logger.debug(i18n_1.nls.localize('finishHandshake'));
        await stream.subscribe(async () => {
            this.logger.debug(i18n_1.nls.localize('subscribeStarted'));
        });
    }
    async createStreamingClient(org) {
        const options = new core_1.StreamingClient.DefaultOptions(org, constants_1.STREAMING_LOG_TOPIC, this.streamingCallback.bind(this));
        options.setSubscribeTimeout(kit_1.Duration.minutes(constants_1.LOG_TIMER_LENGTH_MINUTES));
        return await core_1.StreamingClient.create(options);
    }
    async logCallback(message) {
        if (message.sobject?.Id) {
            const log = await this.getLogById(message.sobject.Id);
            if (log && this.logTailer) {
                this.logTailer(log.log);
            }
        }
    }
    streamingCallback(message) {
        if (message.errorName === constants_1.LISTENER_ABORTED_ERROR_NAME) {
            return { completed: true };
        }
        if (message.sobject?.Id) {
            this.logCallback(message);
        }
        return { completed: false };
    }
    async prepareTraceFlag(requestedDebugLevel) {
        const flags = new traceFlags_1.TraceFlags(this.connection);
        await flags.ensureTraceFlags(requestedDebugLevel);
    }
    async toolingRequest(url) {
        const log = (await this.connection.tooling.request(url));
        return log;
    }
}
exports.LogService = LogService;
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "getLogIds", null);
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "getLogs", null);
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "getLogById", null);
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "getLogRecords", null);
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "tail", null);
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "createStreamingClient", null);
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "logCallback", null);
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "streamingCallback", null);
__decorate([
    (0, elapsedTime_1.elapsedTime)()
], LogService.prototype, "toolingRequest", null);
//# sourceMappingURL=logService.js.map