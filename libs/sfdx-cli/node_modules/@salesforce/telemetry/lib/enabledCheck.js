"use strict";
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEnabled = void 0;
// deep imports to avoid requiring the ENTIRE package (which will also pull in jsforce) until we get ESM done
const configAggregator_1 = require("@salesforce/core/configAggregator");
const config_1 = require("@salesforce/core/config");
// store the result to reduce checks
let enabled;
/**
 *
 * Check ConfigAggregator once for telemetry opt-out.  Returns true unless config/env has opt-out
 * If you don't pass in a ConfigAggregator, one will be constructed for you
 * memoized: only runs once
 *
 * */
const isEnabled = async (configAggregator) => {
    if (enabled === undefined) {
        const agg = configAggregator ?? (await configAggregator_1.ConfigAggregator.create({}));
        enabled = agg.getPropertyValue(config_1.SfConfigProperties.DISABLE_TELEMETRY) !== 'true';
    }
    return enabled;
};
exports.isEnabled = isEnabled;
//# sourceMappingURL=enabledCheck.js.map