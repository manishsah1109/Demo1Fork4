/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages } from '@salesforce/core';
import { SfCommand, Flags } from '@salesforce/sf-plugins-core';
import { importFromPlan } from '../../../api/data/tree/importPlan.js';
import { importFromFiles } from '../../../api/data/tree/importFiles.js';
import { orgFlags } from '../../../flags.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'tree.import');
/**
 * Command that provides data import capability via the SObject Tree Save API.
 */
export default class Import extends SfCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static aliases = ['force:data:tree:import', 'data:import:beta:tree'];
    static deprecateAliases = true;
    static flags = {
        ...orgFlags,
        files: Flags.string({
            char: 'f',
            summary: messages.getMessage('flags.files.summary'),
            exactlyOne: ['files', 'plan'],
            aliases: ['sobjecttreefiles'],
            deprecateAliases: true,
            multiple: true,
            delimiter: ',',
        }),
        plan: Flags.file({
            char: 'p',
            summary: messages.getMessage('flags.plan.summary'),
            description: messages.getMessage('flags.plan.description'),
            exactlyOne: ['files', 'plan'],
            exists: true,
        }),
    };
    async run() {
        const { flags } = await this.parse(Import);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        const results = flags.plan
            ? await importFromPlan(conn, flags.plan)
            : await importFromFiles(conn, flags.files ?? []);
        this.styledHeader('Import Results');
        this.table(results, {
            refId: { header: 'Reference ID' },
            type: { header: 'Type' },
            id: { header: 'ID' },
        });
        return results;
    }
}
//# sourceMappingURL=tree.js.map