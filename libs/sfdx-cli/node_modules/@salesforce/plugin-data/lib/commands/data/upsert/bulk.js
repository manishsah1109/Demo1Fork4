/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages } from '@salesforce/core';
import { Flags, SfCommand } from '@salesforce/sf-plugins-core';
import { Duration } from '@salesforce/kit';
import { runBulkOperation, baseFlags } from '../../../bulkOperationBase.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'bulkv2.upsert');
export default class Upsert extends SfCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static flags = {
        ...baseFlags,
        'external-id': Flags.string({
            char: 'i',
            summary: messages.getMessage('flags.external-id.summary'),
            required: true,
            aliases: ['externalid'],
            deprecateAliases: true,
        }),
    };
    async run() {
        const { flags } = await this.parse(Upsert);
        return runBulkOperation({
            cmd: this,
            sobject: flags.sobject,
            csvFileName: flags.file,
            connection: flags['target-org'].getConnection(flags['api-version']),
            wait: flags.async ? Duration.minutes(0) : flags.wait,
            verbose: flags.verbose,
            operation: 'upsert',
            options: {
                extIdField: flags['external-id'],
            },
        });
    }
}
//# sourceMappingURL=bulk.js.map