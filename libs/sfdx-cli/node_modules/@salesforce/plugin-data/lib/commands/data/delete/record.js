/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages, SfError } from '@salesforce/core';
import { SfCommand, Flags } from '@salesforce/sf-plugins-core';
import { orgFlags, perflogFlag } from '../../../flags.js';
import { collectErrorMessages, query } from '../../../dataUtils.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'record.delete');
export default class Delete extends SfCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static aliases = ['force:data:record:delete'];
    static deprecateAliases = true;
    static flags = {
        ...orgFlags,
        sobject: Flags.string({
            char: 's',
            required: true,
            summary: messages.getMessage('flags.sobject.summary'),
            aliases: ['sobjecttype'],
            deprecateAliases: true,
        }),
        // eslint-disable-next-line sf-plugin/id-flag-suggestions
        'record-id': Flags.salesforceId({
            length: 'both',
            char: 'i',
            summary: messages.getMessage('flags.record-id.summary'),
            exactlyOne: ['where', 'record-id'],
            aliases: ['sobjectid'],
            deprecateAliases: true,
        }),
        where: Flags.string({
            char: 'w',
            summary: messages.getMessage('flags.where.summary'),
            exactlyOne: ['where', 'record-id'],
        }),
        'use-tooling-api': Flags.boolean({
            char: 't',
            summary: messages.getMessage('flags.use-tooling-api.summary'),
            aliases: ['usetoolingapi'],
            deprecateAliases: true,
        }),
        perflog: perflogFlag,
    };
    async run() {
        const { flags } = await this.parse(Delete);
        this.spinner.start('Deleting Record');
        let status = 'Success';
        try {
            const conn = flags['use-tooling-api']
                ? flags['target-org'].getConnection(flags['api-version']).tooling
                : flags['target-org'].getConnection(flags['api-version']);
            // "where flag" will be defined if sobjectId is not
            const sObjectId = flags['record-id'] ?? (await query(conn, flags.sobject, flags.where)).Id;
            const result = await conn.sobject(flags.sobject).destroy(sObjectId);
            if (result.success) {
                this.log(messages.getMessage('deleteSuccess', [sObjectId]));
            }
            else {
                status = 'Failed';
                const errors = collectErrorMessages(result);
                this.error(messages.getMessage('deleteFailure', [errors]));
            }
            this.spinner.stop(status);
            return result;
        }
        catch (err) {
            status = 'Failed';
            this.spinner.stop(status);
            if (!(err instanceof Error)) {
                throw err;
            }
            throw new SfError(err.message, err.name);
        }
    }
}
//# sourceMappingURL=record.js.map