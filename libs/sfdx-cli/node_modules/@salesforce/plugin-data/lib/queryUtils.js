import { FieldType } from './types.js';
import { JsonReporter } from './reporters/query/reporters.js';
import { CsvReporter } from './reporters/query/csvReporter.js';
import { HumanReporter } from './reporters/query/humanReporter.js';
export const displayResults = (queryResult, resultFormat) => {
    let reporter;
    switch (resultFormat) {
        case 'human':
            reporter = new HumanReporter(queryResult, queryResult.columns);
            break;
        case 'json':
            reporter = new JsonReporter(queryResult, queryResult.columns);
            break;
        case 'csv':
            reporter = new CsvReporter(queryResult, queryResult.columns);
            break;
    }
    // delegate to selected reporter
    reporter.display();
};
/**
 * transforms Bulk 2.0 results to match the SOQL query results
 *
 * @param results results object
 * @param query query string
 */
export const transformBulkResults = (results, query) => {
    /*
      bulk queries return a different payload, it's a [{column: data}, {column: data}]
      so we just need to grab the first object, find the keys (columns) and create the columns
       */
    const columns = Object.keys(results[0] ?? {}).map((name) => ({
        fieldType: FieldType.field,
        name,
    }));
    return {
        columns,
        result: { done: true, records: results, totalSize: results.length },
        query,
    };
};
//# sourceMappingURL=queryUtils.js.map