"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageVersionReport = getPackageVersionReport;
// Node
const node_util_1 = __importDefault(require("node:util"));
// Local
const core_1 = require("@salesforce/core");
const pkgUtils = __importStar(require("../utils/packageUtils"));
const defaultFields = [
    'Id',
    'Package2Id',
    'SubscriberPackageVersionId',
    'Name',
    'Description',
    'Tag',
    'Branch',
    'AncestorId',
    'ValidationSkipped',
    'MajorVersion',
    'MinorVersion',
    'PatchVersion',
    'BuildNumber',
    'IsReleased',
    'CodeCoverage',
    'HasPassedCodeCoverageCheck',
    'Package2.IsOrgDependent',
    'ReleaseVersion',
    'BuildDurationInSeconds',
    'HasMetadataRemoved',
    'CreatedById',
    'ConvertedFromVersionId',
];
let verboseFields = ['SubscriberPackageVersion.Dependencies', 'CodeCoveragePercentages'];
// Ensure we only include the async validation property for api version of v60.0 or higher.
const default61Fields = ['ValidatedAsync'];
const verbose61Fields = ['EndToEndBuildDurationInSeconds'];
const DEFAULT_ORDER_BY_FIELDS = 'Package2Id, Branch, MajorVersion, MinorVersion, PatchVersion, BuildNumber';
let logger;
const getLogger = () => {
    if (!logger) {
        logger = core_1.Logger.childFromRoot('getPackageVersionReport');
    }
    return logger;
};
function constructQuery(connectionVersion, verbose) {
    // Ensure we only include the async validation property for api version of v60.0 or higher.
    let queryFields = connectionVersion > 60 ? [...defaultFields, ...default61Fields] : defaultFields;
    verboseFields = connectionVersion > 60 ? [...verboseFields, ...verbose61Fields] : verboseFields;
    if (verbose) {
        queryFields = [...queryFields, ...verboseFields];
    }
    const select = `SELECT ${queryFields.toString()} FROM Package2Version`;
    const wherePart = "WHERE Id = '%s' AND IsDeprecated != true";
    const orderByPart = `ORDER BY ${DEFAULT_ORDER_BY_FIELDS}`;
    const query = `${select} ${wherePart} ${orderByPart}`;
    getLogger().debug(query);
    return query;
}
async function getPackageVersionReport(options) {
    getLogger().debug(`entering getPackageVersionReport(${node_util_1.default.inspect(options, { depth: null })})`);
    const queryResult = await options.connection.tooling.query(node_util_1.default.format(constructQuery(Number(options.connection.version), options.verbose), options.packageVersionId));
    const records = queryResult.records;
    if (records?.length > 0) {
        const record = records[0];
        record.Version = [record.MajorVersion, record.MinorVersion, record.PatchVersion, record.BuildNumber].join('.');
        const containerOptions = await pkgUtils.getContainerOptions(record.Package2Id, options.connection);
        if (containerOptions.size > 0 && record.Package2Id) {
            record.PackageType = containerOptions.get(record.Package2Id);
        }
        record.AncestorVersion = null;
        if (record.AncestorId) {
            // lookup AncestorVersion value
            const ancestorVersionMap = await pkgUtils.getPackageVersionStrings([record.AncestorId], options.connection);
            record.AncestorVersion = ancestorVersionMap.get(record.AncestorId);
        }
        else if (record.PackageType !== 'Managed') {
            record.AncestorVersion = null;
            record.AncestorId = null;
        }
        record.HasPassedCodeCoverageCheck =
            record.Package2.IsOrgDependent === true || record.ValidationSkipped === true
                ? null
                : record.HasPassedCodeCoverageCheck;
        record.Package2.IsOrgDependent = record.PackageType === 'Managed' ? null : !!record.Package2.IsOrgDependent;
        // set HasMetadataRemoved to null Unlocked, otherwise use existing value
        record.HasMetadataRemoved = record.PackageType !== 'Managed' ? null : !!record.HasMetadataRemoved;
        return records;
    }
    return [];
}
//# sourceMappingURL=packageVersionReport.js.map