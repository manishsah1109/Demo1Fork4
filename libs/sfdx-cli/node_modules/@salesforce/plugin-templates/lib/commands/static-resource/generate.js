/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Flags, loglevel, orgApiVersionFlagWithDeprecations, SfCommand, Ux } from '@salesforce/sf-plugins-core';
import { TemplateType } from '@salesforce/templates';
import { Messages } from '@salesforce/core';
import { outputDirFlag } from '../../utils/flags.js';
import { getCustomTemplates, runGenerator } from '../../utils/templateCommand.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-templates', 'staticResource');
export default class StaticResource extends SfCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static aliases = ['force:staticresource:create'];
    static deprecateAliases = true;
    static flags = {
        name: Flags.string({
            char: 'n',
            summary: messages.getMessage('flags.name.summary'),
            description: messages.getMessage('flags.name.description'),
            required: true,
            aliases: ['resourcename'],
            deprecateAliases: true,
        }),
        type: Flags.string({
            summary: messages.getMessage('flags.type.summary'),
            description: messages.getMessage('flags.type.description'),
            default: 'application/zip',
            aliases: ['contenttype'],
            deprecateAliases: true,
        }),
        'output-dir': outputDirFlag,
        'api-version': orgApiVersionFlagWithDeprecations,
        loglevel,
    };
    async run() {
        const { flags } = await this.parse(StaticResource);
        // translate the new flags to the old ones the generator expects
        const flagsAsOptions = {
            resourcename: flags.name,
            contenttype: flags.type,
            template: 'empty',
            outputdir: flags['output-dir'],
            apiversion: flags['api-version'],
        };
        return runGenerator({
            templateType: TemplateType.StaticResource,
            opts: flagsAsOptions,
            ux: new Ux({ jsonEnabled: this.jsonEnabled() }),
            templates: getCustomTemplates(this.configAggregator),
        });
    }
}
//# sourceMappingURL=generate.js.map