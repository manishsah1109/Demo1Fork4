/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Flags, loglevel, orgApiVersionFlagWithDeprecations, SfCommand, Ux } from '@salesforce/sf-plugins-core';
import { TemplateType } from '@salesforce/templates';
import { CreateUtil } from '@salesforce/templates/lib/utils/index.js';
import { Messages } from '@salesforce/core';
import { getCustomTemplates, runGenerator } from '../../../utils/templateCommand.js';
import { internalFlag, outputDirFlagLightning } from '../../../utils/flags.js';
const lightningInterfaceFileSuffix = /.intf$/;
const BUNDLE_TYPE = 'Interface';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-templates', 'lightningInterface');
const lightningCommon = Messages.loadMessages('@salesforce/plugin-templates', 'lightning');
export default class LightningInterface extends SfCommand {
    static summary = lightningCommon.getMessage('summary', [BUNDLE_TYPE]);
    static description = lightningCommon.getMessage('description', [BUNDLE_TYPE]);
    static examples = messages.getMessages('examples');
    static aliases = ['force:lightning:interface:create'];
    static deprecateAliases = true;
    static flags = {
        name: Flags.string({
            char: 'n',
            summary: lightningCommon.getMessage('flags.name.summary', [BUNDLE_TYPE]),
            description: lightningCommon.getMessage('flags.name.description'),
            required: true,
            aliases: ['interfacename'],
            deprecateAliases: true,
        }),
        template: Flags.string({
            char: 't',
            summary: lightningCommon.getMessage('flags.template.summary'),
            description: lightningCommon.getMessage('flags.template.description'),
            default: 'DefaultLightningIntf',
            options: CreateUtil.getCommandTemplatesForFiletype(lightningInterfaceFileSuffix, 'lightninginterface'),
        }),
        'output-dir': outputDirFlagLightning,
        'api-version': orgApiVersionFlagWithDeprecations,
        internal: internalFlag,
        loglevel,
    };
    async run() {
        const { flags } = await this.parse(LightningInterface);
        const flagsAsOptions = {
            interfacename: flags.name,
            outputdir: flags['output-dir'],
            internal: flags.internal,
            apiversion: flags['api-version'],
            template: 'DefaultLightningIntf',
        };
        return runGenerator({
            templateType: TemplateType.LightningInterface,
            opts: flagsAsOptions,
            ux: new Ux({ jsonEnabled: this.jsonEnabled() }),
            templates: getCustomTemplates(this.configAggregator),
        });
    }
}
//# sourceMappingURL=interface.js.map