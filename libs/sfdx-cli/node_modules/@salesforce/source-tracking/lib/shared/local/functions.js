"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WORKDIR = exports.HEAD = exports.FILE = exports.ensurePosix = exports.ensureWindows = exports.isAdded = exports.isDeleted = exports.toFilenames = exports.IS_WINDOWS = void 0;
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = __importStar(require("node:os"));
const path = __importStar(require("node:path"));
exports.IS_WINDOWS = os.type() === 'Windows_NT'; // array members for status results
// filenames were normalized when read from isogit
const toFilenames = (rows) => rows.map((row) => row[exports.FILE]);
exports.toFilenames = toFilenames;
const isDeleted = (status) => status[exports.WORKDIR] === 0;
exports.isDeleted = isDeleted;
const isAdded = (status) => status[exports.HEAD] === 0 && status[exports.WORKDIR] === 2;
exports.isAdded = isAdded;
const ensureWindows = (filepath) => path.win32.normalize(filepath);
exports.ensureWindows = ensureWindows;
const ensurePosix = (filepath) => filepath.split(path.sep).join(path.posix.sep);
exports.ensurePosix = ensurePosix;
// We don't use STAGE (StatusRow[3]). Changes are added and committed in one step
exports.FILE = 0;
exports.HEAD = 1;
exports.WORKDIR = 2;
//# sourceMappingURL=functions.js.map