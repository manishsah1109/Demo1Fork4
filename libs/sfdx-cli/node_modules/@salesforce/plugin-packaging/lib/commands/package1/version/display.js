/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Flags, loglevel, orgApiVersionFlagWithDeprecations, requiredOrgFlagWithDeprecations, SfCommand, } from '@salesforce/sf-plugins-core';
import { Messages } from '@salesforce/core/messages';
import { Package1Version } from '@salesforce/packaging';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-packaging', 'package1_version_display');
export class Package1VersionDisplayCommand extends SfCommand {
    static summary = messages.getMessage('summary');
    static examples = messages.getMessages('examples');
    static deprecateAliases = true;
    static aliases = ['force:package1:version:display'];
    static flags = {
        loglevel,
        'target-org': requiredOrgFlagWithDeprecations,
        'api-version': orgApiVersionFlagWithDeprecations,
        'package-version-id': Flags.salesforceId({
            length: 'both',
            char: 'i',
            deprecateAliases: true,
            aliases: ['packageversionid'],
            summary: messages.getMessage('flags.package-version-id.summary'),
            required: true,
            startsWith: '04t',
        }),
    };
    async run() {
        const { flags } = await this.parse(Package1VersionDisplayCommand);
        const pv1 = new Package1Version(flags['target-org'].getConnection(flags['api-version']), flags['package-version-id']);
        const results = (await pv1.getPackageVersion()).map((result) => ({
            MetadataPackageVersionId: result.Id,
            MetadataPackageId: result.MetadataPackageId,
            Name: result.Name,
            ReleaseState: result.ReleaseState,
            Version: `${result.MajorVersion}.${result.MinorVersion}.${result.PatchVersion}`,
            BuildNumber: result.BuildNumber,
        }));
        if (results.length === 0) {
            this.warn('No results found');
        }
        else {
            this.table(results, {
                MetadataPackageVersionId: { header: 'MetadataPackageVersionId' },
                MetadataPackageId: { header: 'MetadataPackageId' },
                Name: { header: 'Name' },
                Version: { header: 'Version' },
                ReleaseState: { header: 'ReleaseState' },
                BuildNumber: { header: 'BuildNumber' },
            });
        }
        return results;
    }
}
//# sourceMappingURL=display.js.map