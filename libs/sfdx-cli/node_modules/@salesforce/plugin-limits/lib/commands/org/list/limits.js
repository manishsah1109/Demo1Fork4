/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages, SfError } from '@salesforce/core';
import { SfCommand, orgApiVersionFlagWithDeprecations, loglevel, requiredOrgFlagWithDeprecations, } from '@salesforce/sf-plugins-core';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-limits', 'display');
export class LimitsApiDisplayCommand extends SfCommand {
    static aliases = ['force:limits:api:display', 'limits:api:display'];
    static deprecateAliases = true;
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static flags = {
        'target-org': requiredOrgFlagWithDeprecations,
        'api-version': orgApiVersionFlagWithDeprecations,
        loglevel,
    };
    async run() {
        try {
            const { flags } = await this.parse(LimitsApiDisplayCommand);
            const conn = flags['target-org'].getConnection(flags['api-version']);
            const result = await conn.request('/limits');
            const limits = Object.entries(result).map(([name, { Max, Remaining }]) => ({
                name,
                max: Max,
                remaining: Remaining,
            }));
            this.table(limits, { name: { header: 'Name' }, remaining: { header: 'Remaining' }, max: { header: 'Max' } });
            return limits;
        }
        catch (err) {
            if (err instanceof Error || typeof err === 'string') {
                throw SfError.wrap(err);
            }
            throw err;
        }
    }
}
//# sourceMappingURL=limits.js.map