/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages, SfError } from '@salesforce/core';
import { arrayWithDeprecation, loglevel, orgApiVersionFlagWithDeprecations, requiredOrgFlagWithDeprecations, SfCommand, } from '@salesforce/sf-plugins-core';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-limits', 'recordcounts');
export class LimitsRecordCountsDisplayCommand extends SfCommand {
    static aliases = ['force:limits:recordcounts:display', 'limits:recordcounts:display'];
    static deprecateAliases = true;
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static flags = {
        sobject: arrayWithDeprecation({
            char: 's',
            summary: messages.getMessage('flags.sobject.summary'),
            aliases: ['sobjecttype'],
            default: [],
        }),
        'target-org': requiredOrgFlagWithDeprecations,
        'api-version': orgApiVersionFlagWithDeprecations,
        loglevel,
    };
    async run() {
        try {
            const { flags } = await this.parse(LimitsRecordCountsDisplayCommand);
            const conn = flags['target-org'].getConnection(flags['api-version']);
            const sobjectsQuery = flags.sobject.length > 0 ? `=${flags.sobject.join()}` : '';
            const geturl = `/limits/recordCount?sObjects${sobjectsQuery}`;
            const result = await conn.request(geturl);
            const recordCounts = result.sObjects
                .filter((record) => (flags.sobject.length > 0 ? flags.sobject.includes(record.name) : result.sObjects))
                .sort((a, b) => a.name.localeCompare(b.name));
            this.table(recordCounts, {
                name: { header: 'sObject' },
                count: { header: 'Record Count' },
            });
            return recordCounts;
        }
        catch (err) {
            if (err instanceof Error || typeof err === 'string') {
                throw SfError.wrap(err);
            }
            throw err;
        }
    }
}
//# sourceMappingURL=record-counts.js.map