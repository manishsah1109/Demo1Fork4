/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { StateAggregator, Messages } from '@salesforce/core';
import { loglevel } from '@salesforce/sf-plugins-core';
import { AliasCommand } from '../../alias.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-settings', 'alias.list');
export default class AliasList extends AliasCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static aliases = ['force:alias:list'];
    static deprecateAliases = true;
    static flags = { loglevel };
    async run() {
        await this.parse(AliasList);
        const stateAggregator = await StateAggregator.getInstance();
        const aliases = stateAggregator.aliases.getAll();
        const results = Object.entries(aliases).map(([alias, value]) => ({ alias, value }));
        this.output('Alias List', results);
        return results;
    }
}
//# sourceMappingURL=list.js.map