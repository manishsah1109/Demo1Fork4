/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import os from 'node:os';
import { SfCommand, Flags, orgApiVersionFlagWithDeprecations, requiredOrgFlagWithDeprecations, loglevel, } from '@salesforce/sf-plugins-core';
import { Messages } from '@salesforce/core';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-schema', 'list');
export var SObjectType;
(function (SObjectType) {
    SObjectType[SObjectType["ALL"] = 0] = "ALL";
    SObjectType[SObjectType["STANDARD"] = 1] = "STANDARD";
    SObjectType[SObjectType["CUSTOM"] = 2] = "CUSTOM";
})(SObjectType || (SObjectType = {}));
export class SObjectList extends SfCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static aliases = ['force:schema:sobject:list'];
    static deprecateAliases = true;
    static flags = {
        'target-org': requiredOrgFlagWithDeprecations,
        'api-version': orgApiVersionFlagWithDeprecations,
        loglevel,
        sobject: Flags.string({
            char: 's',
            default: 'ALL',
            summary: messages.getMessage('flags.sobject.summary'),
            aliases: ['sobjecttypecategory', 'c'],
            parse: (val) => {
                const lowercasedType = val.toLowerCase();
                if (!['all', 'standard', 'custom'].includes(lowercasedType)) {
                    throw messages.createError('invalid-sobject-type');
                }
                return Promise.resolve(lowercasedType);
            },
        }),
    };
    async run() {
        const { flags } = await this.parse(SObjectList);
        const category = flags.sobject.toUpperCase();
        const type = SObjectType[category];
        const allDescriptions = await flags['target-org'].getConnection(flags['api-version']).describeGlobal();
        const sobjects = allDescriptions.sobjects
            .filter((sobject) => {
            const isCustom = sobject.custom;
            return (type === SObjectType.ALL ||
                (type === SObjectType.CUSTOM && isCustom) ||
                (type === SObjectType.STANDARD && !isCustom));
        })
            .map((sobject) => sobject.name);
        if (sobjects.length) {
            this.log(sobjects.join(os.EOL));
        }
        else {
            this.log(messages.getMessage('noTypeFound', [SObjectType[type]]));
        }
        return sobjects;
    }
}
//# sourceMappingURL=list.js.map