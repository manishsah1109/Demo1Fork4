"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionResolver = void 0;
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const registryAccess_1 = require("../registry/registryAccess");
const standardvalueset_1 = require("../registry/standardvalueset");
const path_1 = require("../utils/path");
;
const messages = new core_1.Messages('@salesforce/source-deploy-retrieve', 'sdr', new Map([["md_request_fail", "Metadata API request failed: %s"], ["error_convert_invalid_format", "Invalid conversion format '%s'"], ["error_could_not_infer_type", "%s: Could not infer a metadata type"], ["error_unexpected_child_type", "Unexpected child metadata [%s] found for parent type [%s]"], ["noParent", "Could not find parent type for %s (%s)"], ["error_expected_source_files", "%s: Expected source files for type '%s'"], ["error_failed_convert", "Component conversion failed: %s"], ["error_merge_metadata_target_unsupported", "Merge convert for metadata target format currently unsupported"], ["error_missing_adapter", "Missing adapter '%s' for metadata type '%s'"], ["error_missing_transformer", "Missing transformer '%s' for metadata type '%s'"], ["error_missing_type_definition", "Missing metadata type definition in registry for id '%s'."], ["error_missing_child_type_definition", "Type %s does not have a child type definition %s."], ["noChildTypes", "No child types found in registry for %s (reading %s at %s)"], ["error_no_metadata_xml_ignore", "Metadata xml file %s is forceignored but is required for %s."], ["noSourceIgnore", "%s metadata types require source files, but %s is forceignored."], ["noSourceIgnore.actions", "- Metadata types with content are composed of two files: a content file (ie MyApexClass.cls) and a -meta.xml file (i.e MyApexClass.cls-meta.xml). You must include both files in your .forceignore file. Or try appending \u201C\\*\u201D to your existing .forceignore entry.\n\nSee <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_exclude_source.htm> for examples"], ["error_path_not_found", "%s: File or folder not found"], ["noContentFound", "SourceComponent %s (metadata type = %s) is missing its content file."], ["noContentFound.actions", ["Ensure the content file exists in the expected location.", "If the content file is in your .forceignore file, ensure the meta-xml file is also ignored to completely exclude it."]], ["error_parsing_xml", "SourceComponent %s (metadata type = %s) does not have an associated metadata xml to parse"], ["error_expected_file_path", "%s: path is to a directory, expected a file"], ["error_expected_directory_path", "%s: path is to a file, expected a directory"], ["error_directory_not_found_or_not_directory", "%s: path is not a directory"], ["error_no_directory_stream", "%s doesn't support readable streams on directories."], ["error_no_source_to_deploy", "No source-backed components present in the package."], ["error_no_components_to_retrieve", "No components in the package to retrieve."], ["error_static_resource_expected_archive_type", "A StaticResource directory must have a content type of application/zip or application/jar - found %s for %s."], ["error_static_resource_missing_resource_file", "A StaticResource must have an associated .resource file, missing %s.resource-meta.xml"], ["error_no_job_id", "The %s operation is missing a job ID. Initialize an operation with an ID, or start a new job."], ["missingApiVersion", "Could not determine an API version to use for the generated manifest. Tried looking for sourceApiVersion in sfdx-project.json, apiVersion from config vars, and the highest apiVersion from the APEX REST endpoint. Using API version 58.0 as a last resort."], ["invalid_xml_parsing", "error parsing %s due to:\\n message: %s\\n line: %s\\n code: %s"], ["zipBufferError", "Zip buffer was not created during conversion"], ["undefinedComponentSet", "Unable to construct a componentSet. Check the logs for more information."], ["replacementsFileNotRead", "The file \"%s\" specified in the \"replacements\" property of sfdx-project.json could not be read."], ["unsupportedBundleType", "Unsupported Bundle Type: %s"], ["filePathGeneratorNoTypeSupport", "Type not supported for filepath generation: %s"], ["missingFolderType", "The registry has %s as is inFolder but it does not have a folderType"], ["tooManyFiles", "Multiple files found for path: %s."], ["cantGetName", "Unable to calculate fullName from path: %s (%s)"], ["missingMetaFileSuffix", "The metadata registry is configured incorrectly for %s. Expected a metaFileSuffix."], ["uniqueIdElementNotInRegistry", "No uniqueIdElement found in registry for %s (reading %s at %s)."], ["uniqueIdElementNotInChild", "The uniqueIdElement %s was not found the child (reading %s at %s)."], ["suggest_type_header", "A metadata type lookup for \"%s\" found the following close matches:"], ["suggest_type_did_you_mean", "-- Did you mean \".%s%s\" instead for the \"%s\" metadata type?"], ["suggest_type_more_suggestions", "Additional suggestions:\nConfirm the file name, extension, and directory names are correct. Validate against the registry at:\n<https://github.com/forcedotcom/source-deploy-retrieve/blob/main/src/registry/metadataRegistry.json>\n\nIf the type is not listed in the registry, check that it has Metadata API support via the Metadata Coverage Report:\n<https://developer.salesforce.com/docs/metadata-coverage>\n\nIf the type is available via Metadata API but not in the registry\n\n- Open an issue <https://github.com/forcedotcom/cli/issues>\n- Add the type via PR. Instructions: <https://github.com/forcedotcom/source-deploy-retrieve/blob/main/contributing/metadata.md>"], ["type_name_suggestions", "Confirm the metadata type name is correct. Validate against the registry at:\n<https://github.com/forcedotcom/source-deploy-retrieve/blob/main/src/registry/metadataRegistry.json>\n\nIf the type is not listed in the registry, check that it has Metadata API support via the Metadata Coverage Report:\n<https://developer.salesforce.com/docs/metadata-coverage>\n\nIf the type is available via Metadata API but not in the registry\n\n- Open an issue <https://github.com/forcedotcom/cli/issues>\n- Add the type via PR. Instructions: <https://github.com/forcedotcom/source-deploy-retrieve/blob/main/contributing/metadata.md>"]]));
/**
 * Resolve MetadataComponents from an org connection
 */
class ConnectionResolver {
    connection;
    registry;
    // Array of metadata type names to use for listMembers. By default it includes
    // all types defined in the registry.
    mdTypeNames;
    constructor(connection, registry = new registryAccess_1.RegistryAccess(), mdTypes) {
        this.connection = connection;
        this.registry = registry;
        this.mdTypeNames = mdTypes?.length
            ? // ensure the types passed in are valid per the registry
                mdTypes.filter((t) => this.registry.getTypeByName(t))
            : Object.values(this.registry.getRegistry().types).map((t) => t.name);
    }
    async resolve(componentFilter = (component) => (0, ts_types_1.isPlainObject)(component)) {
        const Aggregator = [];
        const childrenPromises = [];
        const componentTypes = new Set();
        const lifecycle = core_1.Lifecycle.getInstance();
        const componentFromDescribe = (await Promise.all(this.mdTypeNames.map((type) => listMembers(this.registry)(this.connection)({ type })))).flat();
        for (const component of componentFromDescribe) {
            let componentType;
            if (isNonEmptyString(component.type)) {
                componentType = this.registry.getTypeByName(component.type);
            }
            else if (isNonEmptyString(component.fileName)) {
                // fix { type: { "$": { "xsi:nil": "true" } } }
                componentType = (0, ts_types_1.ensurePlainObject)(this.registry.getTypeBySuffix((0, path_1.extName)(component.fileName)), `No type found for ${component.fileName} when matching by suffix.  Check the file extension.`);
                component.type = componentType.name;
            }
            else if (!isNonEmptyString(component.type) && !isNonEmptyString(component.fileName)) {
                // has no type and has no filename!  Warn and skip that component.
                // eslint-disable-next-line no-await-in-loop
                await Promise.all([
                    lifecycle.emitWarning(messages.getMessage('error_could_not_infer_type', [component.fullName])),
                    lifecycle.emitTelemetry({ TypeInferenceError: component, from: 'ConnectionResolver' }),
                ]);
                continue;
            }
            else {
                // it DOES have all the important info but we couldn't resolve it.
                // has no type and has no filename!
                throw new core_1.SfError(messages.getMessage('error_could_not_infer_type', [component.fullName]), 'TypeInferenceError', [messages.getMessage('suggest_type_more_suggestions')]);
            }
            Aggregator.push(component);
            componentTypes.add(componentType);
            if (componentType.folderContentType) {
                childrenPromises.push(listMembers(this.registry)(this.connection)({
                    type: this.registry.getTypeByName(componentType.folderContentType).name,
                    folder: component.fullName,
                }));
            }
        }
        for (const componentType of componentTypes) {
            const childTypes = componentType.children?.types;
            if (childTypes) {
                Object.values(childTypes).map((childType) => {
                    childrenPromises.push(listMembers(this.registry)(this.connection)({ type: childType.name }));
                });
            }
        }
        for await (const childrenResult of childrenPromises) {
            Aggregator.push(...childrenResult);
        }
        return {
            components: Aggregator.filter(componentFilter).map((component) => ({
                fullName: (0, ts_types_1.ensureString)(component.fullName, `Component fullName was not set for ${component.fileName ?? '<missing filename>'}`),
                type: this.registry.getTypeByName((0, ts_types_1.ensureString)(component.type, `Component type was not set for ${component.fullName ?? '<missing fullname>'} (${component.fileName ?? '<missing filename>'})`)),
            })),
            apiVersion: this.connection.getApiVersion(),
        };
    }
}
exports.ConnectionResolver = ConnectionResolver;
const listMembers = (registry) => (connection) => async (query) => {
    const mdType = registry.getTypeByName(query.type);
    // Workaround because metadata.list({ type: 'StandardValueSet' }) returns []
    if (mdType.name === registry.getRegistry().types.standardvalueset.name) {
        const members = [];
        const standardValueSetPromises = standardvalueset_1.standardValueSet.fullnames.map(async (standardValueSetFullName) => {
            try {
                const standardValueSetRecord = await connection.singleRecordQuery(`SELECT Id, MasterLabel, Metadata FROM StandardValueSet WHERE MasterLabel = '${standardValueSetFullName}'`, { tooling: true });
                return (standardValueSetRecord.Metadata.standardValue.length && {
                    fullName: standardValueSetRecord.MasterLabel,
                    fileName: `${mdType.directoryName}/${standardValueSetRecord.MasterLabel}.${mdType.suffix ?? ''}`,
                    type: mdType.name,
                });
            }
            catch (err) {
                const logger = core_1.Logger.childFromRoot('ConnectionResolver.listMembers');
                logger.debug(err);
            }
        });
        for await (const standardValueSetResult of standardValueSetPromises) {
            if (standardValueSetResult) {
                members.push(standardValueSetResult);
            }
        }
        return members;
    }
    try {
        return (await connection.metadata.list(query)).map(inferFilenamesFromType(mdType));
    }
    catch (error) {
        const logger = core_1.Logger.childFromRoot('ConnectionResolver.listMembers');
        logger.debug(error.message);
        return [];
    }
};
/* if the Metadata Type doesn't return a correct fileName then help it out */
const inferFilenamesFromType = (metadataType) => (member) => typeof member.fileName === 'object' && metadataType.suffix
    ? { ...member, fileName: `${metadataType.directoryName}/${member.fullName}.${metadataType.suffix}` }
    : member;
const isNonEmptyString = (value) => typeof value === 'string' && value.length > 0;
//# sourceMappingURL=connectionResolver.js.map