"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureDirectoryExists = ensureDirectoryExists;
exports.ensureFileExists = ensureFileExists;
exports.searchUp = searchUp;
const path = __importStar(require("node:path"));
const graceful_fs_1 = __importDefault(require("graceful-fs"));
function ensureDirectoryExists(filePath) {
    if (graceful_fs_1.default.existsSync(filePath)) {
        return;
    }
    ensureDirectoryExists(path.dirname(filePath));
    graceful_fs_1.default.mkdirSync(filePath);
}
function ensureFileExists(filePath) {
    ensureDirectoryExists(path.dirname(filePath));
    graceful_fs_1.default.closeSync(graceful_fs_1.default.openSync(filePath, 'w'));
}
/**
 * Traverse up a file path and search for the given file name.
 *
 * @param start File or folder path to start searching from
 * @param fileName File name to search for
 */
function searchUp(start, fileName) {
    const filePath = path.join(start, fileName);
    if (graceful_fs_1.default.existsSync(filePath)) {
        return filePath;
    }
    const parent = path.resolve(start, '..');
    if (parent === start) {
        return;
    }
    return searchUp(parent, fileName);
}
//# sourceMappingURL=fileSystemHandler.js.map