/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import util from 'node:util';
import { SingleBar } from 'cli-progress';
import { UxBase } from './base.js';
function progress(options = {}) {
    return new SingleBar({ noTTYOutput: Boolean(process.env.TERM === 'dumb' || !process.stdin.isTTY), ...options });
}
/**
 * Class for display a progress bar to the console. Will automatically be suppressed if the --json flag is present.
 */
export class Progress extends UxBase {
    static DEFAULT_OPTIONS = {
        title: 'PROGRESS',
        format: '%s | {bar} | {value}/{total} Components',
        barCompleteChar: '\u2588',
        barIncompleteChar: '\u2591',
        linewrap: true,
    };
    bar;
    total;
    started = false;
    constructor(outputEnabled) {
        super(outputEnabled);
    }
    /**
     * Set the total number of expected components.
     */
    setTotal(total) {
        this.total = total;
        if (this.bar)
            this.bar.setTotal(total);
    }
    /**
     * Start the progress bar.
     */
    start(total, payload = {}, options = Progress.DEFAULT_OPTIONS) {
        if (this.started)
            return;
        this.started = true;
        this.maybeNoop(() => {
            const { title, ...rest } = { ...Progress.DEFAULT_OPTIONS, ...options };
            this.bar = progress({
                ...rest,
                format: util.format(rest.format, title),
            });
            this.bar.setTotal(total);
            this.bar.start(total, 0);
            if (Object.keys(payload).length) {
                this.bar.update(0, payload);
            }
        });
    }
    /**
     * Update the progress bar.
     */
    update(num, payload = {}) {
        if (this.bar)
            this.bar.update(num, payload);
    }
    /**
     * Update the progress bar with the final number and stop it.
     */
    finish(payload = {}) {
        if (this.bar) {
            this.bar.update(this.total, payload);
            this.bar.stop();
        }
    }
    /**
     * Stop the progress bar.
     */
    stop() {
        if (this.bar)
            this.bar.stop();
    }
}
//# sourceMappingURL=progress.js.map