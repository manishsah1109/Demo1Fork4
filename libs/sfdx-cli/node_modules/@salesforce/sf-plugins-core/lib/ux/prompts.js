/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { setTimeout } from 'node:timers/promises';
import { SfError } from '@salesforce/core/sfError';
export const confirm = async ({ message, ms = 10_000, defaultAnswer = false, }) => {
    const promptConfirm = (await import('@inquirer/confirm')).default;
    const answer = promptConfirm({ message, default: defaultAnswer });
    return Promise.race([answer, handleTimeout(answer, ms, defaultAnswer)]);
};
export const secretPrompt = async ({ message, ms = 60_000 }) => {
    const promptSecret = (await import('@inquirer/password')).default;
    const answer = promptSecret({ message });
    return Promise.race([answer, handleTimeout(answer, ms)]);
};
const handleTimeout = async (answer, ms, defaultAnswer) => setTimeout(ms, undefined, { ref: false }).then(() => {
    answer.cancel();
    if (typeof defaultAnswer !== 'undefined')
        return defaultAnswer;
    throw new SfError('Prompt timed out.');
});
export const prompts = { confirm, secretPrompt };
//# sourceMappingURL=prompts.js.map