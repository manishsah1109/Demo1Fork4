/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import os from 'node:os';
import { Ux } from '@salesforce/sf-plugins-core';
import { getClockForSeconds } from '../shared/timeUtils.js';
import { StagedProgress } from './stagedProgress.js';
import { isDefined } from './utils.js';
const columns = {
    key: { header: 'Field' },
    value: { header: 'Value' },
};
const ux = new Ux();
export class SandboxProgress extends StagedProgress {
    action;
    constructor(config) {
        const stageNames = config?.stageNames ?? ['Pending', 'Processing', 'Activating', 'Authenticating'];
        super(stageNames);
        this.action = config?.action ?? 'Create/Refresh';
    }
    // eslint-disable-next-line class-methods-use-this
    getLogSandboxProcessResult(result) {
        const { sandboxProcessObj } = result;
        const sandboxReadyForUse = `Sandbox ${sandboxProcessObj.SandboxName}(${sandboxProcessObj.Id}) is ready for use.`;
        return sandboxReadyForUse;
    }
    // eslint-disable-next-line class-methods-use-this
    getSandboxProgress(
    // sometimes an undefined sandboxRes is passed in
    event) {
        const waitingOnAuth = 'waitingOnAuth' in event ? event.waitingOnAuth : false;
        const { sandboxProcessObj } = event;
        const waitTimeInSec = 'remainingWait' in event ? event.remainingWait ?? 0 : 0;
        const sandboxIdentifierMsg = `${sandboxProcessObj.SandboxName}(${sandboxProcessObj.Id})`;
        return {
            id: sandboxIdentifierMsg,
            status: waitingOnAuth || sandboxProcessObj.Status === 'Completed' ? 'Authenticating' : sandboxProcessObj.Status,
            percentComplete: sandboxProcessObj.CopyProgress,
            remainingWaitTime: waitTimeInSec,
            remainingWaitTimeHuman: waitTimeInSec === 0 ? '' : `${getClockForSeconds(waitTimeInSec)} until timeout.`,
        };
    }
    formatProgressStatus(withClock = true) {
        const table = getSandboxTableAsText(undefined, this.statusData?.sandboxProcessObj).join(os.EOL);
        return [
            withClock && this.statusData
                ? `${getClockForSeconds(this.statusData.sandboxProgress.remainingWaitTime)} until timeout. ${this.statusData.sandboxProgress.percentComplete ?? 0}%`
                : undefined,
            table,
            '---------------------',
            `Sandbox ${this.action ?? ''} Stages`,
            this.formatStages(),
        ]
            .filter(isDefined)
            .join(os.EOL);
    }
    // eslint-disable-next-line class-methods-use-this
    mapCurrentStage(currentStage) {
        switch (currentStage) {
            case 'Pending Remote Creation':
                return 'Pending';
            case 'Remote Sandbox Created':
                return 'Pending';
            case 'Completed':
                return 'Authenticating';
            default:
                return currentStage;
        }
    }
}
export const getTableDataFromProcessObj = (sandboxProcessObj, authUserName) => [
    { key: 'Id', value: sandboxProcessObj.Id },
    { key: 'SandboxName', value: sandboxProcessObj.SandboxName },
    { key: 'Status', value: sandboxProcessObj.Status },
    { key: 'LicenseType', value: sandboxProcessObj.LicenseType },
    { key: 'SandboxInfoId', value: sandboxProcessObj.SandboxInfoId },
    { key: 'Created Date', value: sandboxProcessObj.CreatedDate },
    { key: 'CopyProgress', value: `${sandboxProcessObj.CopyProgress ?? 0}%` },
    ...(sandboxProcessObj.SourceId ? [{ key: 'SourceId', value: sandboxProcessObj.SourceId }] : []),
    ...(sandboxProcessObj.SandboxOrganization
        ? [{ key: 'SandboxOrg', value: sandboxProcessObj.SandboxOrganization }]
        : []),
    ...(sandboxProcessObj.ApexClassId ? [{ key: 'ApexClassId', value: sandboxProcessObj.ApexClassId }] : []),
    ...(sandboxProcessObj.Description ? [{ key: 'Description', value: sandboxProcessObj.Description }] : []),
    ...(authUserName ? [{ key: 'Authorized Sandbox Username', value: authUserName }] : []),
];
export const getSandboxTableAsText = (sandboxUsername, sandboxProgress) => {
    if (!sandboxProgress) {
        return [];
    }
    const tableRows = [];
    ux.table(getTableDataFromProcessObj(sandboxProgress, sandboxUsername), columns, {
        printLine: (s) => {
            tableRows.push(s);
        },
    });
    return tableRows;
};
//# sourceMappingURL=sandboxProgress.js.map